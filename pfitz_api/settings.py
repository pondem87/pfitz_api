"""
Django settings for pfitz_api project.

Generated by 'django-admin startproject' using Django 4.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
from decouple import config
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=lambda v: [s.strip() for s in v.split(',')])
#['192.168.0.179', 'localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'daphne',
    'corsheaders',
    'rest_framework',
    'knox',
    'boto3',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_beat',

    #custom
    'whatsapp',
    'user_accounts',
    'zimgpt',
    'payments',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # cors middleware goes above commonmiddleware
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pfitz_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pfitz_api.wsgi.application'

ASGI_APPLICATION = 'pfitz_api.asgi.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": config("CHANNEL_LAYERS_BACKEND"),
        "CONFIG": {
            "host": config("CHANNEL_LAYERS_HOST")
        }
    }
}

CELERY_BROKER_URL = config("CELERY_BROKER_HOST")

CELERY_BEAT_SCHEDULE_EXPIRES = config("CELERY_BEAT_SCHEDULE_EXPIRES", cast=int, default=43200)


# CORS settings
CORS_ALLOWED_ORIGINS = config('ALLOWED_ORIGINS', cast=lambda v: [s.strip() for s in v.split(',')])
# CORS_ALLOW_ALL_ORIGINS = True

CSRF_TRUSTED_ORIGINS = config('ALLOWED_ORIGINS', cast=lambda v: [s.strip() for s in v.split(',')])


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': config("DB_NAME"),
        'USER': config("DB_USER"),
        'PASSWORD': config("DB_USER_PWD"),
        'HOST': config("DB_HOST"),
        'PORT': config("DB_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Harare'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = config("STATIC_URL")

# STATIC_ROOT = config("STATIC_ROOT_DIR")

# from .cdn_config import (
#     STORAGES,
#     AWS_S3_ACCESS_KEY_ID,
#     AWS_S3_SECRET_ACCESS_KEY,
#     AWS_STORAGE_BUCKET_NAME,
#     AWS_S3_REGION_NAME,
#     AWS_LOCATION,
#     # cloudfront url
#     AWS_S3_CUSTOM_DOMAIN,
# )

from .cdn_config import (
    STATICFILES_STORAGE,
    DEFAULT_FILE_STORAGE,
    AWS_S3_ACCESS_KEY_ID,
    AWS_S3_SECRET_ACCESS_KEY,
    AWS_STORAGE_BUCKET_NAME,
    AWS_S3_REGION_NAME,
    # cloudfront url
    AWS_S3_CUSTOM_DOMAIN,
)

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# set custom user model
AUTH_USER_MODEL = "user_accounts.PfitzUser"

# rest framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': ('knox.auth.TokenAuthentication',),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 15,
}

# knox settings
REST_KNOX = {
  'SECURE_HASH_ALGORITHM': 'cryptography.hazmat.primitives.hashes.SHA512',
  'AUTH_TOKEN_CHARACTER_LENGTH': 64,
  'TOKEN_TTL': timedelta(hours=8),
  'USER_SERIALIZER': 'user_accounts.serializers.PfitzUserSerializer',
  'TOKEN_LIMIT_PER_USER': None,
  'AUTO_REFRESH': False,
}

# setup logging
loggly_token = config("LOGGLY_TOKEN")
loggly_tag = config("LOGGLY_TAG")
log_level = config("GENERAL_LOG_LEVEL")
log_files_root = config("LOG_FILES_ROOT")

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{name} {levelname} {asctime} {module} {message}: {stack_info}',
            'style': '{'
        },
        'simple': {
            'format': '{levelname} {module} {message}',
            'style': '{'
        },
        'json': {
            'format': '{ "loggerName":"%(name)s", "asciTime":"%(asctime)s", "fileName":"%(filename)s", "logRecordCreationTime":"%(created)f", "functionName":"%(funcName)s", "levelNo":"%(levelno)s", "lineNo":"%(lineno)d", "time":"%(msecs)d", "levelName":"%(levelname)s", "message":"%(message)s"}',
        },
    },
    'handlers': {
        'console': {
            'level': log_level,
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'loggly': {
            'class': 'loggly.handlers.HTTPSHandler',
            'level': log_level,
            'formatter': 'json',
            'url': 'https://logs-01.loggly.com/inputs/' + loggly_token + '/tag/' + loggly_tag,
        },
        'file': {
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': log_files_root + 'pfitz.log',
            'when': 'W0',  # Rotate every week on Monday at midnight
            'backupCount': 8,  # Keep up to 8 weeks of logs
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'zimgpt': {
            'handlers': ['console', 'loggly', 'file'],
            'level': log_level,
        },
        'user_accounts': {
            'handlers': ['console', 'loggly', 'file'],
            'level': log_level,
        },
        'whatsapp': {
            'handlers': ['console', 'loggly', 'file'],
            'level': log_level,
        },
        'payments': {
            'handlers': ['console', 'loggly', 'file'],
            'level': log_level,
        },
        'pfitz_api': {
            'handlers': ['console', 'loggly', 'file'],
            'level': log_level,
        }
    }
}

